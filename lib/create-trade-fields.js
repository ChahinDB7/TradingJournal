import tradeStatusConstants from "./trade-status-constants";
import entryStatusConstants from "./entry-status-constants";
import entryStatusTranslations from "./entry-status-translations";
import orderTypeConstants from "./order-type-constants";
import moment from "moment";

export default {
  getEntryFields(currency) {
    return {
      status: {
        label: "Status:",
        value: "Take-profit",
        modelKey: "Status",
        items: [
          {
            id: entryStatusConstants.IS_TAKE_PROFIT,
            text: entryStatusTranslations[entryStatusConstants.IS_TAKE_PROFIT],
          },
          {
            id: entryStatusConstants.IS_STOP_LOSS,
            text: entryStatusTranslations[entryStatusConstants.IS_STOP_LOSS],
          },
          {
            id: entryStatusConstants.IS_BREAK_EVEN,
            text: entryStatusTranslations[entryStatusConstants.IS_BREAK_EVEN],
          },
          {
            id: entryStatusConstants.IS_UNREALIZED,
            text: entryStatusTranslations[entryStatusConstants.IS_UNREALIZED],
            visible: false,
          },
        ],
        field: "select-options",
        key: "status",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "text",
        maxLength: 12,
        required: false,
        minimum: 1,
      },
      realized_pnl: {
        label: "Realized P&L:",
        modelKey: "RealizedPnL",
        value: "",
        field: "input",
        key: "realized_pnl",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        hasPrefix: true,
        prefixText: currency,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "number",
        maxLength: 7,
        required: true,
        minimum: 1,
      },
      quantity: {
        label: "Quantity:",
        modelKey: "Quantity",
        value: "",
        field: "input",
        key: "quantity",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "number",
        maxLength: 7,
        required: false,
        minimum: 1,
      },
      entry_price: {
        label: "Entry price:",
        modelKey: "EntryPrice",
        value: "",
        field: "input",
        key: "entry_price",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        showMultipleEntry: false,
        hasButton: false,
        buttonToolTip: "Add entry",
        buttonText: "plus",
        buttonIcon: "plus",
        noWidthSpecify: true,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "number",
        maxLength: 7,
        required: true,
        minimum: 1,
      },
      take_profit: {
        label: "Take-profit:",
        modelKey: "TakeProfit",
        value: "",
        field: "auto-complete",
        key: "take_profit",
        autoCompleteItems: [],
        isFullCaps: false,
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "number",
        maxLength: 7,
        required: true,
        minimum: 1,
      },
      stop_loss: {
        label: "Stop-loss:",
        modelKey: "Stoploss",
        value: "",
        autoCompleteItems: [],
        field: "auto-complete",
        key: "stop_loss",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "number",
        maxLength: 7,
        required: false,
        minimum: 1,
      },
      order_type: {
        label: "Order type:",
        modelKey: "OrderType",
        value: "Limit order",
        items: [
          { id: orderTypeConstants.LIMIT_ORDER, text: "Limit order" },
          { id: orderTypeConstants.MARKET_ORDER, text: "Market order" },
        ],
        field: "select-options",
        key: "order_type",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "text",
        maxLength: 12,
        required: false,
        minimum: 1,
      },
      is_hedge: {
        label: "Hedge order:",
        modelKey: "IsHedge",
        value: false,
        field: "switch",
        key: "is_hedge",
        isBoolean: true,
        disabled: false,
        hasHelpButton: true,
        helpText:
          "Hedge orders reduce investment risk by taking an offsetting position<br>in a related security to protect against potential losses caused<br>by market fluctuations. They involve buying or selling an opposite position.",
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "text",
        maxLength: 12,
        required: false,
        minimum: 1,
      },
      commission_fees: {
        label: "Commission fees:",
        modelKey: "CommissionFees",
        value: "",
        field: "input",
        key: "commission_fees",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        hasPrefix: true,
        prefixText: currency,
        type: "number",
        maxLength: 7,
        required: false,
        minimum: 1,
      },
      incl_excl_commission_fees: {
        label: "P&L - Commission fees:",
        modelKey: "InclExclFees",
        value: "Inclusive",
        items: [
          { id: false, text: "Exclusive" },
          { id: true, text: "Inclusive" },
        ],
        field: "select-options",
        key: "incl_excl_commission_fees",
        disabled: false,
        visible: true,
        warning: false,
        readOnly: false,
        isApiConfiguration: true,
        isTradingMode: false,
        rightColumn: false,
        showLabel: false,
        type: "text",
        maxLength: 12,
        required: false,
        minimum: 1,
      },
    };
  },
};

export const FIELDS_DATA = {
  symbol: {
    label: "Symbol:",
    value: "",
    field: "auto-complete",
    key: "symbol",
    disabled: false,
    autoCompleteItems: [],
    isFullCaps: true,
    visible: true,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: false,
    showLabel: false,
    type: "text",
    maxLength: 12,
    required: true,
    minimum: 1,
  },
  status: {
    label: "Status:",
    value: "Closed",
    items: [
      { id: 0, text: "Closed" },
      { id: 1, text: "Ongoing" },
      { id: 2, text: "Setup" },
    ],
    field: "select-options",
    key: "status",
    disabled: false,
    visible: true,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: false,
    showLabel: false,
    type: "text",
    maxLength: 12,
    required: false,
    minimum: 1,
  },
  direction: {
    label: "Direction:",
    value: "Buy",
    items: [
      { id: "Buy", text: "Buy" },
      { id: "Sell", text: "Sell" },
    ],
    field: "select-options",
    key: "direction",
    disabled: false,
    visible: true,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: false,
    showLabel: false,
    type: "text",
    maxLength: 12,
    required: false,
    minimum: 1,
  },
  open_trade_at: {
    label: "Open trade at:",
    value: moment().format("YYYY-MM-DDTHH:mm"),
    field: "datetime-picker",
    key: "open_trade_at",
    messageLabel: `'Open trade at'`,
    disabled: false,
    visible: true,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: false,
    showLabel: false,
    type: "datetime",
    maxLength: 7,
    required: true,
    minimum: 1,
  },
  close_trade_at: {
    label: "Close trade at:",
    value: "",
    field: "datetime-picker",
    key: "close_trade_at",
    messageLabel: `'Close trade at'`,
    disabled: false,
    visible: false,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: false,
    showLabel: false,
    type: "datetime",
    maxLength: 7,
    required: true,
    minimum: 1,
  },
  leverage: {
    label: "Leverage:",
    value: 1,
    field: "slider",
    key: "leverage",
    sliderMaximum: 100,
    sliderMinimum: 1,
    labelText: "x",
    showLabel: false,
    disabled: false,
    minimum: 1,
    visible: true,
    warning: false,
    readOnly: false,
    isApiConfiguration: true,
    isTradingMode: false,
    rightColumn: true,
    isCreateTradeModal: true,
    type: "number",
    maxLength: 7,
    required: false,
  },
};
